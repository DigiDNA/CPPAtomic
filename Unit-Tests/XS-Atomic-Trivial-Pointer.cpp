/*******************************************************************************
 * Copyright (c) 2015, Jean-David Gadina - www.xs-labs.com
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/*!
 * @copyright   (c) 2015 - Jean-David Gadina - www.xs-labs.com
 * @brief       Test case XS::Atomic
 */

/* Disabled warnings for GoogleMock */
#ifdef __clang__
#pragma clang diagnostic ignored "-Wglobal-constructors"
#pragma clang diagnostic ignored "-Wpadded"
#pragma clang diagnostic push
#if __clang_major__ >= 7
#pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#pragma clang diagnostic ignored "-Wmissing-noreturn"
#pragma clang diagnostic ignored "-Wpadded"
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#pragma clang diagnostic ignored "-Wdeprecated"
#endif

#include <GoogleMock/GoogleMock.h>

#ifdef __clang__
#pragma clang diagnostic pop
#endif

#include <XS/Atomic.hpp>

using namespace testing;

/*******************************************************************************
 * Common definitions
 ******************************************************************************/

TEST( XS_Atomic_Trivial_Pointer, CTOR )
{
    XS::Atomic< const char * > a;
    
    ASSERT_TRUE( a == nullptr );
}

TEST( XS_Atomic_Trivial_Pointer, CTOR_V )
{
    XS::Atomic< const char * > a{ "hello, world" };
    
    ASSERT_TRUE( strcmp( a, "hello, world" ) == 0 );
}

TEST( XS_Atomic_Trivial_Pointer, CCTOR )
{
    XS::Atomic< const char * > a1{ "hello, world" };
    XS::Atomic< const char * > a2{ a1 };
    
    ASSERT_TRUE( strcmp( a1, "hello, world" ) == 0 );
    ASSERT_TRUE( strcmp( a2, "hello, world" ) == 0 );
}

TEST( XS_Atomic_Trivial_Pointer, OperatorAssign )
{
    XS::Atomic< const char * > a1{ "hello, world" };
    XS::Atomic< const char * > a2;
    
    a2 = a1;
    
    ASSERT_TRUE( strcmp( a1, "hello, world" ) == 0 );
    ASSERT_TRUE( strcmp( a2, "hello, world" ) == 0 );
}

TEST( XS_Atomic_Trivial_Pointer, OperatorAssign_V )
{
    XS::Atomic< const char * > a;
    
    a = "hello, world";
    
    ASSERT_TRUE( strcmp( a, "hello, world" ) == 0 );
}

TEST( XS_Atomic_Trivial_Pointer, OperatorCast )
{
    XS::Atomic< const char * > a{ "hello, world" };
    
    ASSERT_TRUE( strcmp( static_cast< const char * >( a ), "hello, world" ) == 0 );
}

TEST( XS_Atomic_Trivial_Pointer, Load )
{
    XS::Atomic< const char * > a{ "hello, world" };
    
    ASSERT_TRUE( strcmp( a.Load(), "hello, world" ) == 0 );
}

TEST( XS_Atomic_Trivial_Pointer, Store )
{
    XS::Atomic< const char * > a;
    
    a.Store( "hello, world" );
    
    ASSERT_TRUE( strcmp( a.Load(), "hello, world" ) == 0 );
}

TEST( XS_Atomic_Trivial_Pointer, IsLockFree )
{
    XS::Atomic< const char * > a;
    
    ASSERT_TRUE( a.IsLockFree() );
}

TEST( XS_Atomic_Trivial_Pointer, Swap )
{
    XS::Atomic< const char * > a1{ "hello, world" };
    XS::Atomic< const char * > a2{ "hello, universe" };
    
    ASSERT_TRUE( strcmp( a1, "hello, world" ) == 0 );
    ASSERT_TRUE( strcmp( a2, "hello, universe" ) == 0 );
    
    swap( a1, a2 );
    
    ASSERT_TRUE( strcmp( a1, "hello, universe" ) == 0 );
    ASSERT_TRUE( strcmp( a2, "hello, world" ) == 0 );
}

/*******************************************************************************
 * Equality comparable
 ******************************************************************************/

TEST( XS_Atomic_Trivial_Pointer, OperatorEqual )
{
    const char * s1 = "hello, world";
    const char * s2 = "hello, universe";
    
    XS::Atomic< const char * > a1{ s1 };
    XS::Atomic< const char * > a2{ s1 };
    XS::Atomic< const char * > a3{ s2 };
    
    ASSERT_TRUE(  a1 == a2 );
    ASSERT_FALSE( a1 == a3 );
}

TEST( XS_Atomic_Trivial_Pointer, OperatorEqual_V )
{
    const char * s1 = "hello, world";
    const char * s2 = "hello, universe";
    
    XS::Atomic< const char * > a1{ s1 };
    XS::Atomic< const char * > a2{ s2 };
    
    ASSERT_TRUE(  a1 == s1 );
    ASSERT_FALSE( a1 == s2 );
    ASSERT_TRUE(  a2 == s2 );
    ASSERT_FALSE( a2 == s1 );
}

TEST( XS_Atomic_Trivial_Pointer, OperatorNotEqual )
{
    const char * s1 = "hello, world";
    const char * s2 = "hello, universe";
    
    XS::Atomic< const char * > a1{ s1 };
    XS::Atomic< const char * > a2{ s1 };
    XS::Atomic< const char * > a3{ s2 };
    
    ASSERT_FALSE( a1 != a2 );
    ASSERT_TRUE(  a1 != a3 );
}

TEST( XS_Atomic_Trivial_Pointer, OperatorNotEqual_V )
{
    const char * s1 = "hello, world";
    const char * s2 = "hello, universe";
    
    XS::Atomic< const char * > a1{ s1 };
    XS::Atomic< const char * > a2{ s2 };
    
    ASSERT_TRUE(  a1 == s1 );
    ASSERT_FALSE( a1 == s2 );
    ASSERT_TRUE(  a2 == s2 );
    ASSERT_FALSE( a2 == s1 );
}
